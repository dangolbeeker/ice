var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import renderer from 'rax-server-renderer';
import { getRenderAppInstance } from './renderer';
function renderInServer(context, props, options) {
    var appConfig = options.appConfig, _a = options.buildConfig, buildConfig = _a === void 0 ? {} : _a, createBaseApp = options.createBaseApp, emitLifeCycles = options.emitLifeCycles;
    var _b = createBaseApp(appConfig, buildConfig, context), runtime = _b.runtime, modifiedAppConfig = _b.appConfig;
    // Emit app launch cycle
    emitLifeCycles();
    var App = getRenderAppInstance(runtime, props, __assign(__assign({}, options), { appConfig: modifiedAppConfig }));
    return renderer.renderToString(App, {
        defaultUnit: 'rpx',
    });
}
export default function raxAppRendererWithSSR(context, props, options) {
    var appConfig = (options || {}).appConfig;
    if (!appConfig.router) {
        appConfig.router = {};
    }
    if (appConfig.router.type !== 'browser') {
        throw new Error('[SSR]: Only support BrowserRouter when using SSR. You should set the router type to "browser". For more detail, please visit https://rax.js.org/docs/guide/route');
    }
    appConfig.router.type = 'static';
    return renderInServer(context, props, options);
}
