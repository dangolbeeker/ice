"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateMPAEntries = void 0;
var path = require("path");
var app_helpers_1 = require("@builder/app-helpers");
var generateEntry_1 = require("./generateEntry");
var generateMPAEntries = function (api, options) {
    var context = api.context;
    var _a = options.framework, framework = _a === void 0 ? 'rax' : _a, _b = options.targetDir, targetDir = _b === void 0 ? '' : _b;
    var entries = options.entries;
    var rootDir = context.rootDir, commandArgs = context.commandArgs;
    if (commandArgs.mpaEntry) {
        var arr_1 = commandArgs.mpaEntry.split(',');
        entries = entries.filter(function (entry) {
            return arr_1.includes(entry.entryName);
        });
    }
    var parsedEntries = {};
    entries.forEach(function (entry) {
        var entryName = entry.entryName, entryPath = entry.entryPath, pageConfig = __rest(entry, ["entryName", "entryPath"]);
        var source = pageConfig.source;
        var useOriginEntry = /app(\.(t|j)sx?)?$/.test(entryPath);
        // icejs will config entry by api modifyUserConfig
        // when the entry has no export default declaration or is app.ts, do not generate entry
        var finalEntry = !useOriginEntry && app_helpers_1.checkExportDefaultDeclarationExists(path.join(rootDir, 'src', source)) ?
            generateEntry_1.default(api, { framework: framework, targetDir: targetDir, pageEntry: entryPath, entryName: entryName, pageConfig: pageConfig }) :
            entryPath;
        parsedEntries[entryName] = __assign(__assign({}, entry), { finalEntry: finalEntry });
    });
    return parsedEntries;
};
exports.generateMPAEntries = generateMPAEntries;
var setMPAConfig = function (api, config, options) {
    if (!options) {
        throw new Error('There need pass options param to setMPAConfig method');
    }
    var _a = options.type, type = _a === void 0 ? 'web' : _a;
    var parsedEntries = exports.generateMPAEntries(api, options);
    // do not splitChunks when mpa
    config.optimization.splitChunks({ cacheGroups: {} });
    // clear entry points
    config.entryPoints.clear();
    // add mpa entries
    var matchStrs = [];
    Object.keys(parsedEntries).forEach(function (entryKey) {
        var _a = parsedEntries[entryKey], entryName = _a.entryName, source = _a.source, finalEntry = _a.finalEntry;
        config.entry(entryName).add(finalEntry);
        // get page paths for rule match
        var matchStr = "src/" + source;
        matchStrs.push(app_helpers_1.formatPath(matchStr));
    });
    if (type === 'web' && config.plugins.has('document')) {
        config.plugin('document').tap(function (args) {
            return [__assign(__assign({}, args[0]), { pages: Object.values(parsedEntries) })];
        });
    }
    // modify appJSON rules for mpa
    if (config.module.rules.get('appJSON')) {
        var matchInclude = function (filepath) {
            var matchReg = matchStrs.length ? new RegExp(matchStrs.join('|')) : null;
            return matchReg && matchReg.test(filepath);
        };
        config.module.rule('appJSON').include.add(matchInclude);
    }
};
exports.default = setMPAConfig;
