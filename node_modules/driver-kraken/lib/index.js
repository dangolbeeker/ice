"use strict";

exports.__esModule = true;
exports.createBody = createBody;
exports.createEmpty = createEmpty;
exports.createText = createText;
exports.updateText = updateText;
exports.createElement = createElement;
exports.appendChild = appendChild;
exports.removeChild = removeChild;
exports.replaceChild = replaceChild;
exports.insertAfter = insertAfter;
exports.insertBefore = insertBefore;
exports.addEventListener = addEventListener;
exports.removeEventListener = removeEventListener;
exports.removeAttribute = removeAttribute;
exports.setAttribute = setAttribute;
exports.setStyle = setStyle;

var _styleUnit = require("style-unit");

/**
 * Driver for Kraken
 **/
var NON_DIMENSIONAL_REG = /opa|ntw|ne[ch]|ex(?:s|g|n|p|$)|^ord|zoo|grid|orp|ows|mnc|^columns$|bs|erim|onit/i;
var EVENT_PREFIX_REG = /^on[A-Z]/;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var CLASS_NAME = 'className';
var CLASS = 'class';
var STYLE = 'style';
var CHILDREN = 'children';
var TEXT_CONTENT_ATTR = 'textContent';
var CREATE_ELEMENT = 'createElement';
var CREATE_COMMENT = 'createComment';
var CREATE_TEXT_NODE = 'createTextNode';
var SET_ATTRIBUTE = 'setAttribute';
var REMOVE_ATTRIBUTE = 'removeAttribute';
var EMPTY = '';
var isEventProp = (0, _styleUnit.cached)(function (prop) {
  return EVENT_PREFIX_REG.test(prop);
});

function createBody() {
  return document.body;
}

function createEmpty(component) {
  return document[CREATE_COMMENT](EMPTY);
}

function createText(text, component) {
  return document[CREATE_TEXT_NODE](text);
}

function updateText(node, text) {
  node[TEXT_CONTENT_ATTR] = text;
}

function createElement(type, props, component, __shouldConvertUnitlessToRpx) {
  var node = document[CREATE_ELEMENT](type);

  for (var prop in props) {
    var value = props[prop];
    if (prop === CHILDREN) continue;

    if (value != null) {
      if (prop === STYLE) {
        setStyle(node, value, __shouldConvertUnitlessToRpx);
      } else if (isEventProp(prop)) {
        addEventListener(node, prop.slice(2).toLowerCase(), value, component);
      } else {
        setAttribute(node, prop, value);
      }
    }
  }

  return node;
}

function appendChild(node, parent) {
  return parent.appendChild(node);
}

function removeChild(node, parent) {
  parent = parent || node.parentNode; // Maybe has been removed when remove child

  if (parent) {
    parent.removeChild(node);
  }
}

function replaceChild(newChild, oldChild, parent) {
  parent = parent || oldChild.parentNode;
  parent.replaceChild(newChild, oldChild);
}

function insertAfter(node, after, parent) {
  parent = parent || after.parentNode;
  var nextSibling = after.nextSibling;

  if (nextSibling) {
    // Performance improve when node has been existed before nextSibling
    if (nextSibling !== node) {
      insertBefore(node, nextSibling, parent);
    }
  } else {
    appendChild(node, parent);
  }
}

function insertBefore(node, before, parent) {
  parent = parent || before.parentNode;
  parent.insertBefore(node, before);
}

function addEventListener(node, eventName, eventHandler) {
  return node.addEventListener(eventName, eventHandler);
}

function removeEventListener(node, eventName, eventHandler) {
  return node.removeEventListener(eventName, eventHandler);
}

function removeAttribute(node, propKey) {
  if (propKey === DANGEROUSLY_SET_INNER_HTML) return;
  if (propKey === CLASS_NAME) propKey = CLASS;

  if (propKey in node) {
    try {
      // Some node property is readonly when in strict mode
      node[propKey] = null;
    } catch (e) {}
  }

  node[REMOVE_ATTRIBUTE](propKey);
}

function setAttribute(node, propKey, propValue) {
  // For reduce innerHTML operation to improve performance.
  if (propKey === DANGEROUSLY_SET_INNER_HTML) {
    warnUnsupport(DANGEROUSLY_SET_INNER_HTML);
    return;
  }

  if (propKey === CLASS_NAME) propKey = CLASS;

  if (propKey in node) {
    try {
      // Some node property is readonly when in strict mode
      node[propKey] = propValue;
    } catch (e) {
      node[SET_ATTRIBUTE](propKey, propValue);
    }
  } else {
    node[SET_ATTRIBUTE](propKey, propValue);
  }
}

var isDimensionalProp = (0, _styleUnit.cached)(function (prop) {
  return !NON_DIMENSIONAL_REG.test(prop);
});

function setStyle(node, style, __shouldConvertUnitlessToRpx) {
  for (var prop in style) {
    var value = style[prop];
    var convertedValue = void 0;

    if (typeof value === 'number' && isDimensionalProp(prop)) {
      if (__shouldConvertUnitlessToRpx) {
        convertedValue = value + 'rpx'; // Transfrom rpx to vw

        convertedValue = (0, _styleUnit.convertUnit)(convertedValue, prop);
      } else {
        convertedValue = value + 'px';
      }
    } else {
      convertedValue = (0, _styleUnit.convertUnit)(value, prop);
    } // Support CSS custom properties (variables) like { --main-color: "black" }


    if (prop[0] === '-' && prop[1] === '-') {
      // reference: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty.
      // style.setProperty do not support Camel-Case style properties.
      node.style.setProperty(prop, convertedValue);
    } else {
      node.style[prop] = convertedValue;
    }
  }
}

function warnUnsupport(message) {
  console.warn("[DriverKraken]: " + message + " is not supported.");
}