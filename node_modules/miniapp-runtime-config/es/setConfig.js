"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _require = require('miniapp-builder-shared'),
    getAppConfig = _require.getAppConfig,
    filterNativePages = _require.filterNativePages;

var getMiniAppBabelPlugins = require('rax-miniapp-babel-plugins');

var MiniAppRuntimePlugin = require('rax-miniapp-runtime-webpack-plugin');

var MiniAppConfigPlugin = require('rax-miniapp-config-webpack-plugin');

var CopyWebpackPlugin = require('copy-webpack-plugin');

var _require2 = require('path'),
    resolve = _require2.resolve;
/**
 * Set miniapp runtime project webpack config
 * @param {object} config - webpack config chain
 * @param {object} userConfig - user config for miniapp
 * @param {object} options
 * @param {object} options.context - webpack context
 * @param {string} options.target - miniapp platform
 * @param {string} options.babelRuleName - babel loader name in webpack chain
 */


module.exports = function (config, userConfig, _ref) {
  var context = _ref.context,
      target = _ref.target,
      _ref$babelRuleName = _ref.babelRuleName,
      babelRuleName = _ref$babelRuleName === void 0 ? 'babel' : _ref$babelRuleName,
      outputPath = _ref.outputPath;
  var rootDir = context.rootDir,
      command = context.command;

  if (!outputPath) {
    outputPath = resolve(rootDir, 'build', target);
  } // Using components


  var usingComponents = {}; // Native lifecycle map

  var nativeLifeCycleMap = {}; // Using plugins

  var usingPlugins = {}; // Need Copy files or dir

  var needCopyList = [];
  var appConfig = getAppConfig(rootDir, target, nativeLifeCycleMap);
  appConfig.routes = filterNativePages(appConfig.routes, needCopyList, {
    rootDir: rootDir,
    target: target,
    outputPath: outputPath
  });
  config.output.filename('common/[name].js'); // publicPath should not work in miniapp, just keep default value

  config.output.publicPath('/');
  ['jsx', 'tsx'].forEach(function (ruleName) {
    config.module.rule(ruleName).use(babelRuleName).tap(function (options) {
      options.presets = [].concat(options.presets, [{
        plugins: getMiniAppBabelPlugins({
          usingComponents: usingComponents,
          nativeLifeCycleMap: nativeLifeCycleMap,
          target: target,
          rootDir: rootDir,
          usingPlugins: usingPlugins,
          runtimeDependencies: userConfig.runtimeDependencies
        })
      }]);
      return options;
    });
  });
  config.plugin('MiniAppConfigPlugin').use(MiniAppConfigPlugin, [{
    type: 'runtime',
    appConfig: appConfig,
    outputPath: outputPath,
    target: target,
    getAppConfig: getAppConfig,
    nativeConfig: userConfig.nativeConfig
  }]);
  config.plugin('MiniAppRuntimePlugin').use(MiniAppRuntimePlugin, [_extends({}, appConfig, {
    target: target,
    config: userConfig,
    usingComponents: usingComponents,
    nativeLifeCycleMap: nativeLifeCycleMap,
    rootDir: rootDir,
    command: command,
    usingPlugins: usingPlugins,
    needCopyList: needCopyList
  })]);

  if (needCopyList.length > 0) {
    config.plugin('copyWebpackPluginForRuntimeMiniapp').use(CopyWebpackPlugin, [{
      patterns: needCopyList
    }]);
  }

  config.devServer.writeToDisk(true).noInfo(true).inline(false);

  if (!config.get('devtool')) {
    config.devtool(false);
  } else if (command === 'start') {
    config.devtool('inline-source-map');
  }
};