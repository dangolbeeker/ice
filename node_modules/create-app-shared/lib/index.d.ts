import { addAppLifeCycle } from './appLifeCycles';
import { withPageLifeCycle } from './pageLifeCycles';
import emitLifeCycles from './emitLifeCycles';
import { createHistory, getHistory, history } from './history';
import { pathRedirect } from './utils';
import { registerNativeEventListeners, addNativeEventListener, removeNativeEventListener } from './nativeEventListener';
import getSearchParams from './getSearchParams';
import collectAppLifeCycle from './collectAppLifeCycle';
declare function createShareAPI({ withRouter, createElement, useEffect, initHistory }: {
    withRouter: any;
    createElement: any;
    useEffect: any;
    initHistory?: boolean;
}, loadRuntimeModules: any): {
    createBaseApp: (appConfig: any, buildConfig: any, context?: any) => {
        history: import("history").History<unknown>;
        runtime: import("./runtimeModule").default;
        appConfig: any;
    };
    withRouter: import("./enhanceWithRouter").IWithRouter;
    createHistory: typeof createHistory;
    getHistory: typeof getHistory;
    getSearchParams: typeof getSearchParams;
    emitLifeCycles: typeof emitLifeCycles;
    collectAppLifeCycle: typeof collectAppLifeCycle;
    usePageShow: (callback: any) => void;
    usePageHide: (callback: any) => void;
    withPageLifeCycle: typeof withPageLifeCycle;
    addAppLifeCycle: typeof addAppLifeCycle;
    pathRedirect: typeof pathRedirect;
    registerNativeEventListeners: typeof registerNativeEventListeners;
    addNativeEventListener: typeof addNativeEventListener;
    removeNativeEventListener: typeof removeNativeEventListener;
};
export { history };
export default createShareAPI;
