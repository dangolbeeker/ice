/// <reference types="react" />
declare type IRoutesComponent = boolean | React.ComponentType;
interface IRouteItem {
    [key: string]: any;
}
declare type IRoutes = IRouteItem[];
interface IModifyFn {
    (routes: IRoutes): IRoutes;
}
interface IDOMRender {
    ({ App, appMountNode }: {
        App: React.ComponentType;
        appMountNode: HTMLElement;
    }): void;
}
declare type IWrapper<InjectProps> = (<Props>(Component: React.ComponentType<Props & InjectProps>) => React.ComponentType<Props>);
declare type IRenderRouter = (routes?: IRoutes, RoutesComponent?: IRoutesComponent) => React.ComponentType;
declare type IWrapperRouterRender = (renderRouter: IRenderRouter) => IRenderRouter;
declare class RuntimeModule {
    private appConfig;
    private buildConfig;
    private context;
    private renderRouter;
    private AppProvider;
    modifyDOMRender: IDOMRender;
    private modifyRoutesRegistration;
    private wrapperRouteRegistration;
    private routesComponent;
    constructor(appConfig: any, buildConfig: any, context: any);
    loadModule(module: any): void;
    setRenderRouter: (renderRouter: IRenderRouter) => void;
    wrapperRouterRender: (wrapper: IWrapperRouterRender) => void;
    addProvider: (Provider: React.ComponentType) => void;
    composeAppProvider(): import("react").ComponentType<{}>;
    addDOMRender: (render: IDOMRender) => void;
    modifyRoutes: (modifyFn: IModifyFn) => void;
    modifyRoutesComponent: (modify: (routesComponent: IRoutesComponent) => IRoutesComponent) => void;
    wrapperRouteComponent: (wrapperRoute: IWrapper<any>) => void;
    wrapperRoutes: (routes: IRoutes) => IRouteItem[];
    getAppRouter: () => import("react").ComponentType<{}>;
}
export default RuntimeModule;
