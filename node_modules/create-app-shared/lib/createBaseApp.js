"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var runtimeModule_1 = require("./runtimeModule");
var history_1 = require("./history");
var env_1 = require("./env");
var collectAppLifeCycle_1 = require("./collectAppLifeCycle");
var DEFAULE_APP_CONFIG = {
    app: {
        rootId: 'root'
    },
    router: {
        type: 'hash'
    }
};
function mergeDefaultConfig(defaultConfig, config) {
    Object.keys(defaultConfig).forEach(function (key) {
        if (typeof config[key] === 'object' && config[key] !== null) {
            config[key] = mergeDefaultConfig(defaultConfig[key], config[key]);
        }
        else if (!Object.prototype.hasOwnProperty.call(config, key)) {
            config[key] = defaultConfig[key];
        }
    });
    return config;
}
exports.default = (function (_a) {
    var loadRuntimeModules = _a.loadRuntimeModules, createElement = _a.createElement, _b = _a.initHistory, initHistory = _b === void 0 ? true : _b;
    var createBaseApp = function (appConfig, buildConfig, context) {
        if (context === void 0) { context = {}; }
        // Merge default appConfig to user appConfig
        appConfig = mergeDefaultConfig(DEFAULE_APP_CONFIG, appConfig);
        // Set history
        var history;
        if (!env_1.isMiniAppPlatform && initHistory) {
            var router = appConfig.router;
            var type = router.type, basename = router.basename, customHistory = router.history;
            var location_1 = context.initialContext ? context.initialContext.location : null;
            history = history_1.createHistory({ type: type, basename: basename, location: location_1, customHistory: customHistory });
            appConfig.router.history = history;
        }
        context.createElement = createElement;
        // Load runtime modules
        var runtime = new runtimeModule_1.default(appConfig, buildConfig, context);
        loadRuntimeModules(runtime);
        // Collect app lifeCyle
        collectAppLifeCycle_1.default(appConfig);
        return {
            history: history,
            runtime: runtime,
            appConfig: appConfig
        };
    };
    return createBaseApp;
});
