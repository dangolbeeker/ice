"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUsePageLifeCycle = exports.withPageLifeCycle = exports.emit = void 0;
var env_1 = require("./env");
var constants_1 = require("./constants");
var router_1 = require("./router");
// visibleListeners => { [pathname]: { show: [], hide: [] } }
var visibleListeners = {};
function addPageLifeCycle(cycle, callback) {
    var _a;
    if (env_1.isMiniAppPlatform) {
        document.addEventListener(constants_1.MINIAPP_PAGE_LIFECYCLE[cycle], callback);
    }
    else {
        var pathname = router_1.default.current.pathname;
        if (!visibleListeners[pathname]) {
            visibleListeners[pathname] = (_a = {},
                _a[constants_1.SHOW] = [],
                _a[constants_1.HIDE] = [],
                _a);
        }
        visibleListeners[pathname][cycle].push(callback);
    }
}
function emit(cycle, pathname) {
    var _a;
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    // Ensure queue exists
    if (visibleListeners[pathname] && visibleListeners[pathname][cycle]) {
        for (var i = 0, l = visibleListeners[pathname][cycle].length; i < l; i++) {
            (_a = visibleListeners[pathname][cycle])[i].apply(_a, args);
        }
    }
}
exports.emit = emit;
function createPageLifeCycle(useEffect) {
    return function (cycle, callback) {
        useEffect(function () {
            // When component did mount, it will trigger usePageShow callback
            if (cycle === constants_1.SHOW) {
                callback();
            }
            var pathname = router_1.default.current.pathname;
            addPageLifeCycle(cycle, callback);
            return function () {
                if (visibleListeners[pathname]) {
                    var index = visibleListeners[pathname][cycle].indexOf(callback);
                    if (index > -1) {
                        visibleListeners[pathname][cycle].splice(index, 1);
                    }
                }
            };
            // eslint-disable-next-line react-hooks/exhaustive-deps
        }, []);
    };
}
function withPageLifeCycle(Component) {
    var Wrapper = /** @class */ (function (_super) {
        __extends(Wrapper, _super);
        function Wrapper() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = _super.apply(this, args) || this;
            if (_this.onShow) {
                if (!env_1.isMiniAppPlatform) {
                    // In MiniApp platform show event will trigger after addPageLifeCycle, so it needn't be execute in constructor
                    _this.onShow();
                }
                addPageLifeCycle(constants_1.SHOW, _this.onShow.bind(_this));
            }
            if (_this.onHide) {
                addPageLifeCycle(constants_1.HIDE, _this.onHide.bind(_this));
            }
            // Keep the path name corresponding to current page component
            _this.pathname = router_1.default.current.pathname;
            return _this;
        }
        Wrapper.prototype.componentWillUnmount = function () {
            var _a;
            // eslint-disable-next-line no-unused-expressions
            (_a = _super.prototype.componentWillUnmount) === null || _a === void 0 ? void 0 : _a.call(this);
            visibleListeners[this.pathname] = null;
        };
        return Wrapper;
    }(Component));
    Wrapper.displayName = "withPageLifeCycle(" + (Component.displayName || Component.name) + ")";
    return Wrapper;
}
exports.withPageLifeCycle = withPageLifeCycle;
function createUsePageLifeCycle(_a) {
    var useEffect = _a.useEffect;
    var usePageShow = function (callback) {
        createPageLifeCycle(useEffect)(constants_1.SHOW, callback);
    };
    var usePageHide = function (callback) {
        createPageLifeCycle(useEffect)(constants_1.HIDE, callback);
    };
    return {
        usePageShow: usePageShow,
        usePageHide: usePageHide
    };
}
exports.createUsePageLifeCycle = createUsePageLifeCycle;
