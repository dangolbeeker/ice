"use strict";
/* eslint no-undef:0 */
// In a Single-Page Application, sometimes we need to jump to a specific route.
// It is very simple in the Web application, url like #/xxx can jump to the corresponding page.
Object.defineProperty(exports, "__esModule", { value: true });
// Things seem to be very complicated in Weex, because using `MemoryHistory`,
// which is used as a reference implementation and may also be used in non-DOM environments.
// We cannot jump directly through url.
var universal_env_1 = require("universal-env");
// We want to control applications on different platforms to jump to specific pages through unified parameters.
// Like https://xxx.com?_path=/page1, use `_path` to jump to the specific route.
var TARGET_PATH_REG = /[?&]_path=([^&#]+)/i;
function pathRedirect(history, routes) {
    var targetPath = '';
    var targetQuery = null;
    // In Web, use location.search first
    if (universal_env_1.isWeb && TARGET_PATH_REG.test(window.location.search)) {
        targetQuery = window.location.search.match(TARGET_PATH_REG);
    }
    // In Weex, use location.href first. Support by rax-weex framework
    if (universal_env_1.isWeex && TARGET_PATH_REG.test(window.location.href)) {
        targetQuery = window.location.href.match(TARGET_PATH_REG);
    }
    // If there is no `_path` in url search, try history.location.
    if (!targetQuery && TARGET_PATH_REG.test(history.location.search)) {
        targetQuery = history.location.search.match(TARGET_PATH_REG);
    }
    var isConfirmed = false;
    targetPath = targetQuery ? targetQuery[1] : '';
    for (var i = 0, l = routes.length; i < l; i++) {
        if (targetPath === routes[i].path) {
            isConfirmed = true;
            break;
        }
    }
    if (targetPath && !isConfirmed) {
        console.warn('Warning: url query `_path` should be an exist path in app.json, see: https://rax.js.org/docs/guide/routes ');
        return false;
    }
    // If `targetPath` exists, jump to the specific route.
    if (targetPath) {
        history.replace(targetPath + history.location.search);
    }
}
exports.default = pathRedirect;
