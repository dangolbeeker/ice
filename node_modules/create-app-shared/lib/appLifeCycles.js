"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAppLifeCycle = exports.emit = exports.appCycles = void 0;
var universal_env_1 = require("universal-env");
var env_1 = require("./env");
var constants_1 = require("./constants");
var utils_1 = require("./utils");
var history_1 = require("./history");
var router_1 = require("./router");
var pageLifeCycles_1 = require("./pageLifeCycles");
exports.appCycles = {};
/**
 * Emit life cycle callback
 * @param {string} cycle cycle name
 * @param {object} context callback's context when executed
 * @param  {...any} args callback params
 */
function emit(cycle, context) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (Object.prototype.hasOwnProperty.call(exports.appCycles, cycle)) {
        var cycles = exports.appCycles[cycle];
        if (cycle === constants_1.SHARE) {
            // In MiniApp, it need return callback result as share info, like { title, desc, path }
            args[0].content = context ? cycles[0].call(context, args[1]) : cycles[0](args[1]);
        }
        else {
            cycles.forEach(function (fn) {
                // eslint-disable-next-line
                context ? fn.apply(context, args) : fn.apply(void 0, args);
            });
        }
    }
}
exports.emit = emit;
/**
 * Add app lifecycle callback
 * @param {string} cycle cycle name
 * @param {function} callback cycle callback
 */
function addAppLifeCycle(cycle, callback) {
    if (utils_1.isFunction(callback)) {
        // eslint-disable-next-line
        var cycles = exports.appCycles[cycle] = exports.appCycles[cycle] || [];
        cycles.push(callback);
    }
}
exports.addAppLifeCycle = addAppLifeCycle;
// Emit MiniApp App lifeCycles
if (env_1.isMiniAppPlatform) {
    window.addEventListener(constants_1.LAUNCH, function (_a) {
        var options = _a.options, context = _a.context;
        emit(constants_1.LAUNCH, context, options);
    });
    window.addEventListener('appshow', function (_a) {
        var options = _a.options, context = _a.context;
        emit(constants_1.SHOW, context, options);
    });
    window.addEventListener('apphide', function (_a) {
        var context = _a.context;
        emit(constants_1.HIDE, context);
    });
    window.addEventListener('apperror', function (_a) {
        var context = _a.context, error = _a.error;
        emit(constants_1.ERROR, context, error);
    });
    window.addEventListener('pagenotfound', function (_a) {
        var context = _a.context;
        emit(constants_1.NOT_FOUND, context);
    });
    window.addEventListener('appshare', function (_a) {
        var context = _a.context, shareInfo = _a.shareInfo, options = _a.options;
        emit(constants_1.SHARE, context, shareInfo, options);
    });
    window.addEventListener('tabitemclick', function (_a) {
        var options = _a.options, context = _a.context;
        emit(constants_1.TAB_ITEM_CLICK, context, options);
    });
}
else if (universal_env_1.isWeex) {
    try {
        // https://weex.apache.org/docs/modules/globalEvent.html#addeventlistener
        // Use __weex_require__ in Rax project.
        var globalEvent = __weex_require__('@weex-module/globalEvent');
        globalEvent.addEventListener('WXApplicationDidBecomeActiveEvent', function () {
            router_1.default.current.visibiltyState = true;
            // Emit app show
            emit(constants_1.SHOW);
            // Emit page show
            pageLifeCycles_1.emit(constants_1.SHOW, router_1.default.current.pathname);
        });
        globalEvent.addEventListener('WXApplicationWillResignActiveEvent', function () {
            router_1.default.current.visibiltyState = false;
            // Emit page hide
            pageLifeCycles_1.emit(constants_1.HIDE, router_1.default.current.pathname);
            // Emit app hide
            emit(constants_1.HIDE);
        });
    }
    catch (err) {
        console.log("@weex-module/globalEvent error: " + err);
    }
}
else if (typeof document !== 'undefined' && typeof window !== 'undefined') {
    document.addEventListener('visibilitychange', function () {
        // Get history
        var history = history_1.getHistory();
        var currentPathName = history ? history.location.pathname : router_1.default.current.pathname;
        // The app switches from foreground to background
        if (currentPathName === router_1.default.current.pathname) {
            router_1.default.current.visibiltyState = !router_1.default.current.visibiltyState;
            if (router_1.default.current.visibiltyState) {
                // Emit app show
                emit(constants_1.SHOW);
                // Emit page show
                pageLifeCycles_1.emit(constants_1.SHOW, router_1.default.current.pathname);
            }
            else {
                // Emit page hide
                pageLifeCycles_1.emit(constants_1.HIDE, router_1.default.current.pathname);
                // Emit app hide
                emit(constants_1.HIDE);
            }
        }
    });
    // Emit error lifeCycles
    window.addEventListener('error', function (event) {
        emit(constants_1.ERROR, null, event.error);
    });
}
