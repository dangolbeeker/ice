import { IExportData } from '../types/base';
interface IRenderData {
    [key: string]: any;
}
interface IRegistration {
    [key: string]: any[];
}
interface IRenderFile {
    (templatePath: string, targetDir: string, extraData?: IRenderData): void;
}
interface IRenderDataRegistration {
    (renderDataFunction: IRenderData): IRenderData;
}
interface ITemplateOptions {
    templateDir: string;
    targetDir: string;
}
export default class Generator {
    targetDir: string;
    renderData: IRenderData;
    contentRegistration: IRegistration;
    private rerender;
    private rootDir;
    private renderTemplates;
    private renderDataRegistration;
    private log;
    private showPrettierError;
    private disableRuntimePlugins;
    private plugins;
    private debugRuntime;
    constructor({ rootDir, targetDir, defaultData, log, plugins, debugRuntime }: {
        rootDir: any;
        targetDir: any;
        defaultData: any;
        log: any;
        plugins: any;
        debugRuntime: any;
    });
    addExport: (registerKey: any, exportData: IExportData | IExportData[]) => void;
    removeExport: (registerKey: string, removeExportName: string | string[]) => void;
    addContent(apiName: any, ...args: any[]): void;
    private getExportStr;
    parseRenderData(): {
        staticConfig: string;
        globalStyle: string;
        entryImportsBefore: string;
        entryImportsAfter: string;
        entryCodeBefore: string | any[];
        entryCodeAfter: string | any[];
    };
    generateImportStr(apiName: any): string;
    render: () => void;
    debounceRender: any;
    addRenderFile: (templatePath: string, targetPath: string, extraData?: IRenderData) => void;
    addTemplateDir: (template: string | ITemplateOptions, extraData?: IRenderData) => void;
    modifyRenderData(registration: IRenderDataRegistration): void;
    renderFile: IRenderFile;
    addDisableRuntimePlugin: (pluginName: string) => void;
}
export {};
