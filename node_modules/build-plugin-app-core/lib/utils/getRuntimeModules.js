"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var globby = require("globby");
var formatPath_1 = require("./formatPath");
exports.default = (function (plugins, targetDir, debugRuntime) {
    if (plugins === void 0) { plugins = []; }
    return plugins.map(function (_a) {
        var pluginPath = _a.pluginPath, name = _a.name;
        // compatible with function plugin
        if (!pluginPath)
            return false;
        // NOTE: module.js will be discarded in future.
        var pluginDir = path.dirname(pluginPath);
        var modulePath = path.join(pluginDir, 'runtime.js');
        var moduleDir = path.join(pluginDir, '..');
        if (!fse.existsSync(modulePath)) {
            modulePath = path.join(pluginDir, 'module.js');
            if (!fse.existsSync(modulePath)) {
                return false;
            }
            console.log("WARN: module.ts(x) will not be supported in the future. Please rename as runtime.ts(x) in " + modulePath);
        }
        else if (name && debugRuntime) {
            // copy module dir to target dir
            var tempDir = path.join(targetDir, 'plugins', name);
            fse.ensureDirSync(tempDir);
            // ensure source dir
            var srcDir = path.join(moduleDir, 'src');
            if (fse.existsSync(srcDir)) {
                fse.copySync(srcDir, tempDir);
                var runtimePaths = globby.sync('runtime.@((t|j)s?(x))', { cwd: tempDir });
                if (runtimePaths.length > 0) {
                    modulePath = path.join(tempDir, runtimePaths[0]);
                }
            }
            else {
                fse.copySync(pluginDir, tempDir);
                modulePath = path.join(tempDir, 'runtime.js');
            }
            modulePath = "./" + path.relative(targetDir, modulePath.replace(/.(t|j)(s|sx)$/, ''));
        }
        // read package.json
        var pluginConfig = {};
        var pkgPath = path.join(moduleDir, 'package.json');
        try {
            pluginConfig = fse.readJSONSync(pkgPath).pluginConfig;
        }
        catch (error) {
            console.log("ERROR: fail to load package.json of plugin " + name);
        }
        return {
            pluginConfig: pluginConfig,
            modulePath: formatPath_1.default(modulePath),
        };
    })
        .filter(Boolean)
        .map(function (_a) {
        var modulePath = _a.modulePath, pluginConfig = _a.pluginConfig;
        var staticModule = (pluginConfig && pluginConfig.staticModule) || false;
        return {
            staticModule: staticModule,
            path: modulePath
        };
    });
});
