"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var miniappConfig = require("miniapp-runtime-config");
var builderShared = require("miniapp-builder-shared");
var path = require("path");
module.exports = function (api) {
    var onGetWebpackConfig = api.onGetWebpackConfig, context = api.context, registerUserConfig = api.registerUserConfig, getValue = api.getValue;
    var rootDir = context.rootDir, userConfig = context.userConfig;
    var _a = userConfig.targets, targets = _a === void 0 ? [] : _a;
    targets.forEach(function (target) {
        if (target === 'miniapp' || target === 'wechat-miniprogram') {
            onGetWebpackConfig(target, function (config) {
                var _a = userConfig.outputDir, outputDir = _a === void 0 ? 'build' : _a;
                registerUserConfig({
                    name: target,
                    validation: 'object'
                });
                var projectType = getValue('PROJECT_TYPE');
                // Reset entry
                config.entryPoints.clear();
                config.entry('index').add(builderShared.pathHelper.getDepPath(rootDir, "app." + projectType));
                var outputPath = path.resolve(rootDir, outputDir, target);
                config.output.path(path.join(rootDir, 'build', target));
                miniappConfig.setConfig(config, userConfig[target] || {}, { context: context, target: target, babelRuleName: 'babel-loader', outputPath: outputPath });
                if (config.plugins.get('MiniCssExtractPlugin')) {
                    config.plugin('MiniCssExtractPlugin').tap(function (_a) {
                        var args = _a[0];
                        return [
                            __assign(__assign({}, args), { filename: target + "/[name].css" })
                        ];
                    });
                }
                // Remove default HtmlWebpackPlugin
                config.plugins.delete('HtmlWebpackPlugin');
                // Remove default CopyWebpackPlugin
                config.plugins.delete('CopyWebpackPlugin');
            });
        }
        ;
    });
};
