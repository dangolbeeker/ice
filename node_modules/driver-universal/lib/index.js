"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _universalEnv = require("universal-env");

var _dom = _interopRequireDefault(require("./dom"));

var _driverMiniapp = _interopRequireDefault(require("driver-miniapp"));

var WeexDriver = _interopRequireWildcard(require("driver-weex"));

var KrakenDriver = _interopRequireWildcard(require("driver-kraken"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var currentDriver;

if (_universalEnv.isWeex) {
  currentDriver = WeexDriver;
} else if (_universalEnv.isWeb) {
  currentDriver = (0, _dom["default"])();
} else if (_universalEnv.isKraken) {
  currentDriver = KrakenDriver;
} else if (_universalEnv.isMiniApp || _universalEnv.isWeChatMiniProgram || _universalEnv.isByteDanceMicroApp || _universalEnv.isBaiduSmartProgram || _universalEnv.isKuaiShouMiniProgram) {
  currentDriver = _driverMiniapp["default"];
} else {
  console.warn('Warning: Your environment was not supported by driver-universal.');
}

var _default = currentDriver;
exports["default"] = _default;