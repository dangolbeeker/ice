"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var recursiveReaddir = require("fs-readdir-recursive");
var app_helpers_1 = require("@builder/app-helpers");
var getPath_1 = require("./utils/getPath");
var checkPageIndexFileExists_1 = require("./utils/checkPageIndexFileExists");
var matchRegex = /^[^._].*\.(js|ts)$/;
var Generator = /** @class */ (function () {
    function Generator(_a) {
        var rootDir = _a.rootDir, appStoreTemplatePath = _a.appStoreTemplatePath, pageStoreTemplatePath = _a.pageStoreTemplatePath, typesTemplatePath = _a.typesTemplatePath, targetPath = _a.targetPath, applyMethod = _a.applyMethod, projectType = _a.projectType, srcDir = _a.srcDir, resetPageState = _a.resetPageState;
        this.rootDir = rootDir;
        this.appStoreTemplatePath = appStoreTemplatePath;
        this.pageStoreTemplatePath = pageStoreTemplatePath;
        this.typesTemplatePath = typesTemplatePath;
        this.targetPath = targetPath;
        this.applyMethod = applyMethod;
        this.projectType = projectType;
        this.srcDir = srcDir;
        this.resetPageState = resetPageState;
    }
    Generator.prototype.getPageModels = function (pageModelsDir, pageModelFile) {
        var importStr = '';
        var modelsStr = '';
        if (fse.pathExistsSync(pageModelsDir)) {
            var pageModels = recursiveReaddir(pageModelsDir)
                .filter(function (pageModel) { return matchRegex.test(pageModel); })
                .map(function (item) { return path.parse(item); });
            pageModelsDir = app_helpers_1.formatPath(pageModelsDir);
            pageModels.forEach(function (pageModel) {
                if (pageModel.dir) {
                    // Note: 嵌套忽略
                }
                else {
                    importStr += "\nimport " + pageModel.name + " from '" + pageModelsDir + "/" + pageModel.name + "';";
                }
                modelsStr += pageModel.name + ",";
            });
            return {
                isSingleModel: false,
                importStr: importStr,
                modelsStr: modelsStr
            };
        }
        else if (fse.pathExistsSync(pageModelFile)) {
            var pageComponentName = 'pageModel';
            return {
                isSingleModel: true,
                importStr: "import " + pageComponentName + " from '" + app_helpers_1.formatPath(pageModelFile.replace("." + this.projectType, '')) + "';",
                modelsStr: pageComponentName
            };
        }
        else {
            return {
                importStr: importStr,
                modelsStr: modelsStr,
            };
        }
    };
    Generator.prototype.renderAppStore = function (_a) {
        var appStoreFile = _a.appStoreFile;
        var sourceFilename = 'store/index';
        var exportName = 'store';
        var targetPath = path.join(this.targetPath, sourceFilename + ".ts");
        var appModelsDir = getPath_1.getAppModelsPath({ rootDir: this.rootDir, srcDir: this.srcDir });
        var appModels = [];
        if (fse.pathExistsSync(appModelsDir)) {
            appModelsDir = app_helpers_1.formatPath(appModelsDir);
            appModels = fse.readdirSync(appModelsDir)
                .filter(function (appModel) { return matchRegex.test(appModel); })
                .map(function (item) { return path.parse(item).name; });
        }
        var importStr = '';
        var modelsStr = '';
        appModels.forEach(function (model) {
            importStr += "\nimport " + model + " from '" + appModelsDir + "/" + model + "';";
            modelsStr += model + ",";
        });
        var appStoreRenderData = {
            importStr: importStr,
            modelsStr: modelsStr,
            isSingleModel: false,
            appStoreImport: "import store from '" + appStoreFile.replace("." + this.projectType, '') + "'"
        };
        this.applyMethod('addRenderFile', this.appStoreTemplatePath, targetPath, appStoreRenderData);
        this.applyMethod('removeExport', exportName);
        this.applyMethod('addExport', {
            source: "./" + sourceFilename,
            specifier: 'store',
            exportName: exportName,
            importSource: "$$ice/" + sourceFilename,
            exportDefault: 'store',
        });
    };
    Generator.prototype.renderAppStoreTypes = function (_a) {
        var hasAppModels = _a.hasAppModels, existsAppStoreFile = _a.existsAppStoreFile;
        var sourceFilename = 'store/types';
        var targetPath = path.join(this.targetPath, sourceFilename + ".ts");
        var appStoreTypesRenderData = {
            hasAppModels: hasAppModels,
            existsAppStoreFile: existsAppStoreFile
        };
        this.applyMethod('addRenderFile', this.typesTemplatePath, targetPath, appStoreTypesRenderData);
        this.applyMethod('addTypesExport', { source: './store/types' });
        this.applyMethod('appImportDeclarations', {
            importSource: '$$ice/store/types',
            exportMembers: ['IRootDispatch', 'IRootState', 'IStore', 'IStoreModels', 'IStoreDispatch', 'IStoreRootState'],
        });
    };
    Generator.prototype.renderPageStore = function (_a) {
        var pageName = _a.pageName, pageModelsDir = _a.pageModelsDir, pageModelFile = _a.pageModelFile, existedStoreFile = _a.existedStoreFile;
        if (!existedStoreFile && (fse.pathExistsSync(pageModelsDir) || fse.pathExistsSync(pageModelFile))) {
            var sourceFilename = 'store';
            var exportName = 'store';
            var targetPath = path.join(this.targetPath, 'pages', pageName, sourceFilename + ".ts");
            var renderData = this.getPageModels(pageModelsDir, pageModelFile);
            this.applyMethod('addRenderFile', this.pageStoreTemplatePath, targetPath, renderData);
            this.applyMethod('removePageExport', pageName, exportName);
            this.applyMethod('addPageExport', pageName, { source: "./" + sourceFilename, exportName: exportName });
        }
    };
    Generator.prototype.renderPageComponent = function (_a) {
        var pageName = _a.pageName, pageNameDir = _a.pageNameDir, pageModelsDir = _a.pageModelsDir, pageModelFile = _a.pageModelFile, pageStoreFile = _a.pageStoreFile, existedStoreFile = _a.existedStoreFile;
        var pageComponentTemplatePath = path.join(__dirname, './template/pageComponent.tsx.ejs');
        var pageComponentTargetPath = path.join(this.targetPath, 'pages', pageName, 'Page.tsx');
        var pageComponentSourcePath = app_helpers_1.formatPath(pageNameDir);
        var pageComponentName = 'PageComponent';
        var modelRenderData = {};
        if (this.resetPageState) {
            modelRenderData = this.getPageModels(pageModelsDir, pageModelFile);
        }
        var pageComponentRenderData = __assign({ pageComponentImport: "import " + pageComponentName + " from '" + pageComponentSourcePath + "'", pageComponentExport: pageComponentName, hasPageStore: false, pageStoreImport: existedStoreFile ? "import store from '" + pageStoreFile.replace("." + this.projectType, '') + "'" : 'import store from \'./store\'', resetPageState: this.resetPageState }, modelRenderData);
        if (existedStoreFile || fse.pathExistsSync(pageModelsDir) || fse.pathExistsSync(pageModelFile)) {
            pageComponentRenderData.hasPageStore = true;
            checkPageIndexFileExists_1.default(pageNameDir);
        }
        this.applyMethod('addRenderFile', pageComponentTemplatePath, pageComponentTargetPath, pageComponentRenderData);
    };
    Generator.prototype.renderPageLayout = function (_a) {
        var pageName = _a.pageName, pageNameDir = _a.pageNameDir, pageModelsDir = _a.pageModelsDir, pageModelFile = _a.pageModelFile, pageStoreFile = _a.pageStoreFile, existedStoreFile = _a.existedStoreFile;
        var pageComponentTemplatePath = path.join(__dirname, './template/pageComponent.tsx.ejs');
        var pageComponentTargetPath = path.join(this.targetPath, 'pages', pageName, 'Layout.tsx');
        var pageComponentSourcePath = app_helpers_1.formatPath(pageNameDir + "/Layout");
        if (!fse.pathExistsSync(pageComponentSourcePath)) {
            return;
        }
        var pageLayoutName = pageName + "Layout";
        var modelRenderData = {};
        if (this.resetPageState) {
            modelRenderData = this.getPageModels(pageModelsDir, pageModelFile);
        }
        var pageLayoutRenderData = __assign({ pageComponentImport: "import " + pageLayoutName + " from '" + pageComponentSourcePath + "'", pageComponentExport: pageLayoutName, hasPageStore: false, pageStoreImport: existedStoreFile ? "import store from '" + pageStoreFile.replace("." + this.projectType, '') + "'" : 'import store from \'./store\'', resetPageState: this.resetPageState }, modelRenderData);
        if (existedStoreFile || fse.pathExistsSync(pageModelsDir) || fse.pathExistsSync(pageModelFile)) {
            pageLayoutRenderData.hasPageStore = true;
            checkPageIndexFileExists_1.default(pageNameDir);
        }
        this.applyMethod('addRenderFile', pageComponentTemplatePath, pageComponentTargetPath, pageLayoutRenderData);
    };
    Generator.prototype.renderPageIndex = function (params) {
        var pageName = params.pageName, existedStoreFile = params.existedStoreFile, pageModelFile = params.pageModelFile, pageModelsDir = params.pageModelsDir;
        var pageIndexTemplatePath = path.join(__dirname, './template/pageIndex.ts.ejs');
        var pageComponentTargetPath = path.join(this.targetPath, 'pages', pageName, 'index.ts');
        var existsModel = fse.pathExistsSync(pageModelsDir) || fse.pathExistsSync(pageModelFile);
        var pageComponentRenderData = {
            pageImports: (existsModel && !existedStoreFile) ? 'import store from \'./store\'' : '',
            pageExports: (existsModel && !existedStoreFile) ? ' store ' : ''
        };
        this.applyMethod('addRenderFile', pageIndexTemplatePath, pageComponentTargetPath, pageComponentRenderData);
    };
    Generator.prototype.render = function () {
        var _this = this;
        var appStoreFile = app_helpers_1.formatPath(getPath_1.getAppStorePath({ rootDir: this.rootDir, srcDir: this.srcDir, projectType: this.projectType }));
        var existsAppStoreFile = fse.pathExistsSync(appStoreFile);
        var appModelsPath = getPath_1.getAppModelsPath({ rootDir: this.rootDir, srcDir: this.srcDir });
        var hasAppModels = fse.pathExistsSync(appModelsPath);
        // if store is created by user, don't create .ice/store/index.ts
        if (!existsAppStoreFile) {
            // generate .ice/store/index.ts
            this.renderAppStore({ appStoreFile: appStoreFile });
        }
        // generate .ice/store/types.ts
        this.renderAppStoreTypes({ hasAppModels: hasAppModels, existsAppStoreFile: existsAppStoreFile });
        var pageNames = this.applyMethod('getPages', this.rootDir, this.srcDir);
        pageNames.forEach(function (pageName) {
            var _a = getPath_1.getPageModelPath({
                rootDir: _this.rootDir,
                srcDir: _this.srcDir,
                pageName: pageName,
                projectType: _this.projectType,
            }), pageModelsDir = _a.pageModelsDir, pageModelFile = _a.pageModelFile, pageNameDir = _a.pageNameDir;
            var pageStoreFile = app_helpers_1.formatPath(getPath_1.getPageStorePath({
                rootDir: _this.rootDir,
                srcDir: _this.srcDir,
                pageName: pageName,
                projectType: _this.projectType,
            }));
            var existedStoreFile = fse.pathExistsSync(pageStoreFile);
            var params = { pageName: pageName, pageNameDir: pageNameDir, pageModelsDir: pageModelsDir, pageModelFile: pageModelFile, pageStoreFile: pageStoreFile, existedStoreFile: existedStoreFile, existsAppStoreFile: existsAppStoreFile };
            // generate .ice/pages/${pageName}/store.ts
            _this.renderPageStore(params);
            // generate .ice/pages/${pageName}/index.ts
            _this.renderPageIndex(params);
            // generate .ice/pages/${pageName}/Page.tsx
            _this.renderPageComponent(params);
            // generate .ice/pages/${pageName}/Layout.tsx
            _this.renderPageLayout(params);
        });
    };
    return Generator;
}());
exports.default = Generator;
