"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var globby = require("globby");
var path = require("path");
var getPath_1 = require("./getPath");
var chalk = require('chalk');
exports.default = (function (_a) {
    var rootDir = _a.rootDir, srcDir = _a.srcDir, projectType = _a.projectType, pages = _a.pages;
    var srcPath = path.join(rootDir, srcDir);
    var appStoreFilePath = "store." + projectType;
    var appStoreMatchingPaths = globby.sync('store.*', { cwd: srcPath });
    checkFileExists(srcPath, appStoreMatchingPaths, appStoreFilePath);
    pages.forEach(function (pageName) {
        var pagePath = getPath_1.getPagePath({ rootDir: rootDir, srcDir: srcDir, pageName: pageName });
        var pageStoreFilePath = "store." + projectType;
        var pageStoreMatchingPaths = globby.sync('store.*', { cwd: pagePath });
        checkFileExists(pagePath, pageStoreMatchingPaths, pageStoreFilePath);
        var pageModelFilePath = "model." + projectType;
        var pageModelMatchingPaths = globby.sync('model.*', { cwd: pagePath });
        checkFileExists(pagePath, pageModelMatchingPaths, pageModelFilePath);
    });
});
/**
 * Check the store[j|t]s or model[j|t]s which framework will read if one of them exists.
 * e.g.: in TS project, when user writed store.js file, but framework will read store.ts, warning will occur in the terminal.
 */
function checkFileExists(absolutePath, matchingPaths, targetFilePath) {
    if (matchingPaths.length && !matchingPaths.find(function (matchingPath) { return matchingPath === targetFilePath; })) {
        console.log(chalk.yellow(chalk.black.bgYellow(' WARNING '), "Expect " + path.join(absolutePath, targetFilePath) + ", but found " + matchingPaths.map(function (matchingPath) { return path.join(absolutePath, matchingPath); }).join(', ') + "."));
    }
}
