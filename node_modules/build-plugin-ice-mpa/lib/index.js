"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs-extra");
var app_helpers_1 = require("@builder/app-helpers");
var mpa_config_1 = require("@builder/mpa-config");
var plugin = function (api) {
    var _a;
    var context = api.context, registerUserConfig = api.registerUserConfig, registerCliOption = api.registerCliOption, modifyUserConfig = api.modifyUserConfig, onGetWebpackConfig = api.onGetWebpackConfig, log = api.log, setValue = api.setValue, getValue = api.getValue;
    var rootDir = context.rootDir, userConfig = context.userConfig, commandArgs = context.commandArgs;
    var mpa = userConfig.mpa;
    // register mpa in build.json
    registerUserConfig({
        name: 'mpa'
    });
    // support --mpa-entry to specify mpa entry
    registerCliOption({
        name: 'mpa-entry',
        commands: ['start'],
    });
    if (mpa) {
        var mpaEntries = app_helpers_1.getMpaEntries(api);
        var entries_1 = mpaEntries.reduce(function (acc, _a) {
            var _b;
            var entryName = _a.entryName, entryPath = _a.entryPath;
            return __assign(__assign({}, acc), (_b = {}, _b[entryName] = entryPath, _b));
        }, {});
        var finalEntries_1 = {};
        if (commandArgs.mpaEntry) {
            var arr = commandArgs.mpaEntry.split(',');
            arr.forEach(function (pageName) {
                var entryName = pageName.toLocaleLowerCase();
                if (entries_1[entryName]) {
                    finalEntries_1[entryName] = entries_1[entryName];
                }
            });
            if (Object.keys(finalEntries_1).length > 0) {
                entries_1 = finalEntries_1;
                log.info('已启用 --mpa-entry 指定多页入口 \n', JSON.stringify(entries_1));
            }
            else {
                log.warn("--mpa-entry " + commandArgs.entry, '未能匹配到指定入口');
            }
        }
        else {
            log.info('使用多页面模式 \n', JSON.stringify(entries_1));
        }
        var mpaRewrites_1 = ((_a = mpa) === null || _a === void 0 ? void 0 : _a.rewrites) || {};
        var serverPath = void 0;
        if (commandArgs.mpaEntry) {
            var arr = commandArgs.mpaEntry.split(',');
            var pageName = arr[0].toLocaleLowerCase();
            serverPath = mpaRewrites_1[pageName] || pageName;
        }
        else {
            var defaultEntryNames = Object.keys(entries_1);
            var pageName = '';
            if (typeof mpa.openPage === 'string') {
                pageName = mpa.openPage.split('.html')[0];
            }
            else {
                pageName = defaultEntryNames[0];
            }
            // compatible with openPage configured with upper camel case
            var pageNameLowerCase = pageName.toLocaleLowerCase();
            serverPath = mpaRewrites_1[pageNameLowerCase] || pageNameLowerCase;
        }
        setValue('SERVER_PATH', serverPath);
        // set page template
        onGetWebpackConfig(function (config) {
            setPageTemplate(rootDir, entries_1, mpa.template || {}, config);
            config.devServer.historyApiFallback({
                rewrites: Object.keys(entries_1).map(function (pageName) {
                    return {
                        from: new RegExp("^/" + (mpaRewrites_1[pageName] || pageName) + "/*"),
                        to: "/" + pageName + ".html",
                    };
                }),
            });
        });
        var parsedEntries_1 = null;
        // compatible with undefined TEMP_PATH
        // if disableRuntime is true, do not generate mpa entries
        if (getValue('TEMP_PATH')) {
            parsedEntries_1 = mpa_config_1.generateMPAEntries(api, { entries: mpaEntries, framework: 'react', targetDir: getValue('TEMP_PATH') });
        }
        var finalMPAEntries_1 = {};
        if (parsedEntries_1) {
            Object.keys(parsedEntries_1).forEach(function (entryKey) {
                finalMPAEntries_1[entryKey] = parsedEntries_1[entryKey].finalEntry;
            });
        }
        else {
            finalMPAEntries_1 = entries_1;
        }
        // modify entry
        modifyUserConfig('entry', finalMPAEntries_1);
    }
};
function setPageTemplate(rootDir, entries, template, config) {
    if (template === void 0) { template = {}; }
    var templateNames = Object.keys(template);
    var entryNames = {};
    templateNames.forEach(function (templateName) {
        template[templateName].forEach(function (entryName) {
            var key = entryName.toLocaleLowerCase();
            entryNames[key] = templateName;
        });
    });
    var defaultEntryNames = Object.keys(entries);
    defaultEntryNames.forEach(function (defaultEntryName) {
        var htmlPluginKey = "HtmlWebpackPlugin_" + defaultEntryName;
        if (config.plugins.get(htmlPluginKey)) {
            var htmlPluginOption_1 = {};
            // modify html template if userConfig mpa.template is specified
            if (entryNames[defaultEntryName]) {
                var entryTemplate = path.join(rootDir, 'public', entryNames[defaultEntryName]);
                if (fs.existsSync(entryTemplate)) {
                    htmlPluginOption_1.template = entryTemplate;
                }
            }
            config.plugin(htmlPluginKey).tap(function (_a) {
                var args = _a[0];
                htmlPluginOption_1.templateParameters = __assign(__assign({}, (args.templateParameters || {})), { pageName: defaultEntryName });
                return [
                    __assign(__assign({}, args), htmlPluginOption_1)
                ];
            });
        }
    });
}
exports.default = plugin;
