"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var ReactDOMServer = require("react-dom/server");
var server_1 = require("@loadable/server");
var renderer_1 = require("./renderer");
function renderInServer(context, options) {
    var appConfig = options.appConfig, _a = options.buildConfig, buildConfig = _a === void 0 ? {} : _a, _b = options.staticConfig, staticConfig = _b === void 0 ? {} : _b, createBaseApp = options.createBaseApp, emitLifeCycles = options.emitLifeCycles;
    var _c = createBaseApp(appConfig, buildConfig, context), runtime = _c.runtime, modifiedAppConfig = _c.appConfig;
    var loadableStatsPath = buildConfig.loadableStatsPath, publicPath = buildConfig.publicPath;
    options.appConfig = modifiedAppConfig;
    // Emit app launch cycle
    emitLifeCycles();
    var isMobile = Object.keys(staticConfig).length;
    if (isMobile) {
        // TODO: ssr is not support in mobile mode
        return { bundleContent: '' };
    }
    var App = renderer_1.getRenderApp(runtime, options);
    var webExtractor = new server_1.ChunkExtractor({
        statsFile: loadableStatsPath,
        entrypoints: ['index'],
        publicPath: publicPath
    });
    var jsx = webExtractor.collectChunks(React.createElement(App, null));
    return {
        bundleContent: ReactDOMServer.renderToString(jsx),
        loadableComponentExtractor: webExtractor
    };
}
function reactAppRendererWithSSR(context, options) {
    var cloneOptions = deepClone(options);
    var appConfig = (cloneOptions || {}).appConfig;
    appConfig.router = appConfig.router || {};
    if (appConfig.router.type !== 'browser') {
        throw new Error('[SSR]: Only support BrowserRouter when using SSR. You should set the router type to "browser". For more detail, please visit https://ice.work/docs/guide/basic/router');
    }
    appConfig.router.type = 'static';
    return renderInServer(context, cloneOptions);
}
exports.default = reactAppRendererWithSSR;
function deepClone(config) {
    if (typeof config !== 'object' || config === null) {
        return config;
    }
    var ret = {};
    Object.getOwnPropertyNames(config).forEach(function (key) {
        if (Object.prototype.hasOwnProperty.call(config, key)) {
            ret[key] = deepClone(config[key]);
        }
    });
    return ret;
}
