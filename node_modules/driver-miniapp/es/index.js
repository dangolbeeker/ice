"use strict";

exports.__esModule = true;
exports.default = void 0;

var DriverDOM = _interopRequireWildcard(require("driver-dom"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    return cache[str] || (cache[str] = fn(str));
  };
}

var EVENT_PREFIX_REG = /^on[A-Z]/;
var NON_DIMENSIONAL_REG = /opa|ntw|ne[ch]|ex(?:s|g|n|p|$)|^ord|zoo|grid|orp|ows|mnc|^columns$|bs|erim|onit/i;
var isDimensionalProp = cached(function (prop) {
  return !NON_DIMENSIONAL_REG.test(prop);
});

var setStyle = function setStyle(node, style) {
  for (var prop in style) {
    var value = style[prop];
    var convertedValue = void 0;

    if (typeof value === 'number' && isDimensionalProp(prop)) {
      convertedValue = value + 'rpx';
    } else {
      convertedValue = value;
    } // Support CSS custom properties (variables) like { --main-color: "black" }


    if (prop[0] === '-' && prop[1] === '-') {
      // reference: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty.
      // style.setProperty do not support Camel-Case style properties.
      node.style.setProperty(prop, convertedValue);
    } else {
      node.style[prop] = convertedValue;
    }
  }
};

var isEventProp = cached(function (prop) {
  return EVENT_PREFIX_REG.test(prop);
}); // Convert Unitless To Rpx defaultly

var _default = Object.assign({}, DriverDOM, {
  createElement: function createElement(type, props) {
    var style;
    var attrs = {};
    var events = [];

    for (var prop in props) {
      var value = props[prop];
      if (prop === 'children') continue;

      if (value != null) {
        if (prop === 'style') {
          style = value;
        } else if (isEventProp(prop)) {
          events.push({
            name: prop.slice(2).toLowerCase(),
            handler: value
          });
        } else {
          if (prop === 'className') {
            prop = 'class';
          }

          attrs[prop] = value;
        }
      }
    }

    var node = document._createElement({
      tagName: type,
      document: document,
      attrs: attrs
    });

    if (style) {
      setStyle(node, style);
    }

    events.forEach(function (_ref) {
      var name = _ref.name,
          handler = _ref.handler;
      node.addEventListener(name, handler);
    });
    return node;
  },
  setStyle: setStyle
});

exports.default = _default;