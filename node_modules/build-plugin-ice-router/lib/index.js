"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fse = require("fs-extra");
var app_helpers_1 = require("@builder/app-helpers");
var walker_1 = require("./collector/walker");
// compatible with $ice/routes
var TEM_ROUTER_COMPATIBLE = '$ice/routes';
var TEM_ROUTER_SETS = [TEM_ROUTER_COMPATIBLE];
var plugin = function (_a) {
    var context = _a.context, onGetWebpackConfig = _a.onGetWebpackConfig, modifyUserConfig = _a.modifyUserConfig, getValue = _a.getValue, applyMethod = _a.applyMethod, registerUserConfig = _a.registerUserConfig;
    var rootDir = context.rootDir, userConfig = context.userConfig, command = context.command;
    // register router in build.json
    registerUserConfig({
        name: 'router',
        validation: function (value) {
            return app_helpers_1.validation('router', value, 'object|boolean');
        },
    });
    var disableRouter = userConfig.router === false;
    // [enum] js or ts
    var projectType = getValue('PROJECT_TYPE');
    // .tmp path
    var iceTempPath = getValue('TEMP_PATH');
    var routerOptions = (userConfig.router || {});
    var configPath = routerOptions.configPath;
    var isMpa = userConfig.mpa;
    var routesTempPath = path.join(iceTempPath, "routes." + projectType);
    var srcDir = applyMethod('getSourceDir', userConfig.entry);
    var _b = applyMethod('getRoutes', {
        rootDir: rootDir,
        tempDir: iceTempPath,
        configPath: configPath,
        projectType: projectType,
        isMpa: isMpa || disableRouter,
        srcDir: srcDir
    }), routesPath = _b.routesPath, isConfigRoutes = _b.isConfigRoutes;
    // modify webpack config
    onGetWebpackConfig(function (config) {
        // add alias
        TEM_ROUTER_SETS.forEach(function (i) {
            config.resolve.alias.set(i, routesPath);
        });
        // alias for runtime/Router
        config.resolve.alias.set('$ice/Router', path.join(__dirname, 'runtime/Router'));
        // alias for runtime/history
        config.resolve.alias.set('$ice/history', path.join(iceTempPath, 'router/history'));
        // alias for runtime/ErrorBoundary
        config.resolve.alias.set('$ice/ErrorBoundary', path.join(iceTempPath, 'ErrorBoundary'));
        // alias for react-router-dom
        var routerName = 'react-router-dom';
        config.resolve.alias.set(routerName, require.resolve(routerName));
        // config historyApiFallback for router type browser
        config.devServer.set('historyApiFallback', true);
    });
    // copy types
    fse.copySync(path.join(__dirname, '../src/types/index.ts'), path.join(iceTempPath, 'router/types/index.ts'));
    fse.copySync(path.join(__dirname, '../src/types/base.ts'), path.join(iceTempPath, 'router/types/base.ts'));
    // set IAppRouterProps to IAppConfig
    applyMethod('addAppConfigTypes', { source: './router/types', specifier: '{ IAppRouterProps }', exportName: 'router?: IAppRouterProps' });
    // export IRouterConfig to the public
    applyMethod('addTypesExport', { source: './router/types' });
    // add import declarations
    applyMethod('addImportDeclarations', {
        importSource: '$$ice/router/types',
        exportMembers: ['IAppRouterProps', 'IRouterConfig'],
    });
    if (!disableRouter) {
        // add babel plugins for ice lazy
        modifyUserConfig('babelPlugins', __spreadArray(__spreadArray([], (userConfig.babelPlugins || [])), [
            [
                require.resolve('./babelPluginLazy'),
                { routesPath: routesPath }
            ]
        ]));
        // copy templates and export react-router-dom/history apis to ice
        var routerTemplatesPath = path.join(__dirname, '../templates');
        var routerTargetPath = path.join(iceTempPath, 'router');
        fse.ensureDirSync(routerTargetPath);
        fse.copySync(routerTemplatesPath, routerTargetPath);
        applyMethod('addExport', {
            source: './router',
            importSource: '$$ice/router',
            exportMembers: [
                'createBrowserHistory',
                'createHashHistory',
                'createMemoryHistory',
                // react-router-dom
                'Link',
                'NavLink',
                'Prompt',
                'Redirect',
                'Route',
                'Switch',
                'matchPath',
                'generatePath',
                // hooks
                'useHistory',
                'useLocation',
                'useParams',
                'useRouteMatch'
            ]
        });
        // do not watch folder pages when route config is exsits
        if (!isConfigRoutes) {
            var routerMatch = 'src/pages';
            var pagesDir = path.join(rootDir, routerMatch);
            var walkerOptions_1 = { rootDir: rootDir, routerOptions: routerOptions, routesTempPath: routesTempPath, pagesDir: pagesDir };
            walker_1.default(walkerOptions_1);
            if (command === 'start') {
                // watch folder change when dev
                applyMethod('watchFileChange', routerMatch, function () {
                    walker_1.default(walkerOptions_1);
                });
            }
        }
    }
    else {
        applyMethod('addAppConfigTypes', { exportName: 'renderComponent?: FrameworkComponentType' });
    }
};
exports.default = plugin;
