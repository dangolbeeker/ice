{"version":3,"file":"converter.js","sourceRoot":"","sources":["../../src/utils/converter.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wEAA2C;AAC3C,sDAAgC;AAChC,+DAAyC;AAEjC,IAAA,SAAS,GAAK,qBAAW,UAAhB,CAAiB;AAElC;;;;;;GAMG;AACH,SAAgB,cAAc,CAAC,YAAiB;IAC9C,IAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI;QAC7C,IAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QACjC,IAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC;QACpC,IAAI,aAAa,IAAI,CAAC,2BAAU,CAAC,aAAa,CAAC,EAAE;YAC/C,iBAAO,CAAC,WAAS,IAAI,sQAAqQ,CAAC,CAAC;YAC5R,KAAK,CAAC,OAAO,GAAG,UAAC,QAAa;gBAC5B,IAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAS,GAAG;oBAC7C,IAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;oBACxC,OAAO,CAAC,GAAG,CAAC,GAAG,UAAC,OAAY,EAAE,SAAc,IAAK,OAAA,YAAY,CAC3D,SAAS,CAAC,IAAI,CAAC,EACf,OAAO,EACP,QAAQ,CAAC,IAAI,CAAC,EACd,QAAQ,CACT,EALgD,CAKhD,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC;SACH;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IACvB,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAxBD,wCAwBC;AAED;;;;;;GAMG;AACH,SAAgB,cAAc,CAAC,YAAiB;IAC9C,IAAM,MAAM,GAAG,EAAE,CAAC;IAClB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI;QAC7C,IAAM,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;QACjC,IAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC9B,IAAI,OAAO,EAAE;YACX,iBAAO,CAAC,WAAS,IAAI,8NAA+N,CAAC,CAAC;YACtP,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACnB,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC;aACrB;YACD,KAAK,CAAC,OAAO,GAAG,UAAS,QAAa;gBACpC,IAAM,OAAO,GAAG,EAAE,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAS,GAAG;oBACvC,IAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;oBAClC,OAAO,CAAC,GAAG,CAAC,GAAG,UAAe,OAAY,EAAE,SAAc;;;;;4CACzC,qBAAM,YAAY,CAC/B,SAAS,CAAC,IAAI,CAAC,EACf,OAAO,EACP,QAAQ,CAAC,IAAI,CAAC,EACd,QAAQ,CACT,EAAA;;wCALK,MAAM,GAAG,SAKd;wCACD,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,EAAE;4CAC7B,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;yCACnC;;;;;qBACF,CAAC;gBACJ,CAAC,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC;SACH;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IACvB,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAChB,CAAC;AAhCD,wCAgCC","sourcesContent":["import isFunction from 'lodash.isfunction';\nimport warning from './warning';\nimport actionTypes from '../actionTypes';\n\nconst { SET_STATE } = actionTypes;\n\n/**\n * convertEffects\n *\n * Compatible with 1.1.0 ~ 1.2.0\n * effects: {} => effects: () => ({})\n * @param originModels\n */\nexport function convertEffects(originModels: any) {\n  const models = {};\n  Object.keys(originModels).forEach(function(name) {\n    const model = originModels[name];\n    const originEffects = model.effects;\n    if (originEffects && !isFunction(originEffects)) {\n      warning(`Model(${name}): Defining effects as objects has been detected, please use \\`{ effects: () => ({ effectName: () => {} }) }\\` instead. \\n\\n\\n Visit https://github.com/ice-lab/icestore/blob/master/docs/upgrade-guidelines.md#define-model-effects to learn about how to upgrade.`);\n      model.effects = (dispatch: any) => {\n        const effects = {};\n        Object.keys(originEffects).forEach(function(key) {\n          const originEffect = originEffects[key];\n          effects[key] = (payload: any, rootState: any) => originEffect(\n            rootState[name],\n            payload,\n            dispatch[name],\n            dispatch,\n          );\n        });\n        return effects;\n      };\n    }\n    models[name] = model;\n  });\n  return models;\n}\n\n/**\n * convertActions\n *\n * Compatible with 1.0.0 ~ 1.1.0\n * actions: {} => effects: () => ({})\n * @param originModels\n */\nexport function convertActions(originModels: any) {\n  const models = {};\n  Object.keys(originModels).forEach(function(name) {\n    const model = originModels[name];\n    const actions = model.actions;\n    if (actions) {\n      warning(`Model(${name}): The actions field has been detected, please use \\`reducers\\` and \\`effects\\` instead. Visit https://github.com/ice-lab/icestore/blob/master/docs/upgrade-guidelines.md#define-model-actions to learn about how to upgrade.`);\n      if (!model.reducers) {\n        model.reducers = {};\n      }\n      model.effects = function(dispatch: any) {\n        const effects = {};\n        Object.keys(actions).forEach(function(key) {\n          const originAction = actions[key];\n          effects[key] = async function(payload: any, rootState: any) {\n            const result = await originAction(\n              rootState[name],\n              payload,\n              dispatch[name],\n              dispatch,\n            );\n            if (dispatch[name][SET_STATE]) {\n              dispatch[name][SET_STATE](result);\n            }\n          };\n        });\n        return effects;\n      };\n    }\n    models[name] = model;\n  });\n  return models;\n}\n"]}