"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertActions = exports.convertEffects = void 0;
var lodash_isfunction_1 = __importDefault(require("lodash.isfunction"));
var warning_1 = __importDefault(require("./warning"));
var actionTypes_1 = __importDefault(require("../actionTypes"));
var SET_STATE = actionTypes_1.default.SET_STATE;
/**
 * convertEffects
 *
 * Compatible with 1.1.0 ~ 1.2.0
 * effects: {} => effects: () => ({})
 * @param originModels
 */
function convertEffects(originModels) {
    var models = {};
    Object.keys(originModels).forEach(function (name) {
        var model = originModels[name];
        var originEffects = model.effects;
        if (originEffects && !lodash_isfunction_1.default(originEffects)) {
            warning_1.default("Model(" + name + "): Defining effects as objects has been detected, please use `{ effects: () => ({ effectName: () => {} }) }` instead. \n\n\n Visit https://github.com/ice-lab/icestore/blob/master/docs/upgrade-guidelines.md#define-model-effects to learn about how to upgrade.");
            model.effects = function (dispatch) {
                var effects = {};
                Object.keys(originEffects).forEach(function (key) {
                    var originEffect = originEffects[key];
                    effects[key] = function (payload, rootState) { return originEffect(rootState[name], payload, dispatch[name], dispatch); };
                });
                return effects;
            };
        }
        models[name] = model;
    });
    return models;
}
exports.convertEffects = convertEffects;
/**
 * convertActions
 *
 * Compatible with 1.0.0 ~ 1.1.0
 * actions: {} => effects: () => ({})
 * @param originModels
 */
function convertActions(originModels) {
    var models = {};
    Object.keys(originModels).forEach(function (name) {
        var model = originModels[name];
        var actions = model.actions;
        if (actions) {
            warning_1.default("Model(" + name + "): The actions field has been detected, please use `reducers` and `effects` instead. Visit https://github.com/ice-lab/icestore/blob/master/docs/upgrade-guidelines.md#define-model-actions to learn about how to upgrade.");
            if (!model.reducers) {
                model.reducers = {};
            }
            model.effects = function (dispatch) {
                var effects = {};
                Object.keys(actions).forEach(function (key) {
                    var originAction = actions[key];
                    effects[key] = function (payload, rootState) {
                        return __awaiter(this, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, originAction(rootState[name], payload, dispatch[name], dispatch)];
                                    case 1:
                                        result = _a.sent();
                                        if (dispatch[name][SET_STATE]) {
                                            dispatch[name][SET_STATE](result);
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        });
                    };
                });
                return effects;
            };
        }
        models[name] = model;
    });
    return models;
}
exports.convertActions = convertActions;
//# sourceMappingURL=converter.js.map