{"version":3,"file":"effects.js","sourceRoot":"","sources":["../../src/plugins/effects.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;GAIG;AACH,IAAM,aAAa,GAAa;IAC9B,OAAO,EAAE;QACP,iDAAiD;QACjD,OAAO,EAAE,EAAE;KACZ;IAED,kFAAkF;IAClF,OAAO,EAAP,UAAQ,KAAc;QACpB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YAClB,OAAO;SACR;QAED,IAAM,OAAO,GACX,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU;YACjC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC9B,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC;QAEpB,IAAI,CAAC,QAAQ,CAAC;YACZ;gBACE,OAAO,OAAO,KAAI,QAAQ;gBAC1B,gCAA8B,KAAK,CAAC,IAAI,uCAAoC;aAC7E;SACF,CAAC,CAAC;QAEH,KAAyB,UAAoB,EAApB,KAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAApB,cAAoB,EAApB,IAAoB,EAAE;YAA1C,IAAM,UAAU,SAAA;YACnB,IAAI,CAAC,QAAQ,CAAC;gBACZ;oBACE,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;oBACxB,0BAAwB,KAAK,CAAC,IAAI,SAAI,UAAU,MAAG;iBACpD;gBACD;oBACE,OAAO,OAAO,CAAC,UAAU,CAAC,KAAK,UAAU;oBACzC,qBAAmB,KAAK,CAAC,IAAI,SAAI,UAAU,0BAAuB;iBACnE;aACF,CAAC,CAAC;YAEH,qCAAqC;YACrC,IAAI,CAAC,OAAO,CAAI,KAAK,CAAC,IAAI,SAAI,UAAY,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CACpE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAC1B,CAAC;YAEF,yBAAyB;YACzB,oFAAoF;YACpF,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CACjE,IAAI,EACJ,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,CAAC,CACzB,CAAC;YACF,gEAAgE;YAChE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;SACvD;IACH,CAAC;IAED,8BAA8B;IAC9B,UAAU,EAAV,UAAW,KAAK;QAAhB,iBAcC;QAbC,OAAO,UAAA,IAAI,IAAI,OAAA,UAAO,MAAgB;;;;6BAEhC,CAAA,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAA,EAA3B,wBAA2B;wBAC7B,sFAAsF;wBACtF,qBAAM,IAAI,CAAC,MAAM,CAAC,EAAA;;wBADlB,sFAAsF;wBACtF,SAAkB,CAAC;wBACnB,sBAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9B,MAAM,CAAC,OAAO,EACd,KAAK,CAAC,QAAQ,EAAE,EAChB,MAAM,CAAC,IAAI,CACZ,EAAC;4BAEJ,sBAAO,IAAI,CAAC,MAAM,CAAC,EAAC;;;aACrB,EAZc,CAYd,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["/* tslint-disable member-ordering */\nimport * as T from '../types';\n\n/**\n * Effects Plugin\n *\n * Plugin for handling async actions\n */\nconst effectsPlugin: T.Plugin = {\n  exposed: {\n    // expose effects for access from dispatch plugin\n    effects: {},\n  },\n\n  // add effects to dispatch so that dispatch[modelName][effectName] calls an effect\n  onModel(model: T.Model): void {\n    if (!model.effects) {\n      return;\n    }\n\n    const effects =\n      typeof model.effects === 'function'\n        ? model.effects(this.dispatch)\n        : model.effects;\n\n    this.validate([\n      [\n        typeof effects!== 'object',\n        `Invalid effects from Model(${model.name}), effects should return an object`,\n      ],\n    ]);\n\n    for (const effectName of Object.keys(effects)) {\n      this.validate([\n        [\n          !!effectName.match(/\\//),\n          `Invalid effect name (${model.name}/${effectName})`,\n        ],\n        [\n          typeof effects[effectName] !== 'function',\n          `Invalid effect (${model.name}/${effectName}). Must be a function`,\n        ],\n      ]);\n\n      // provide this.reducer() for effects\n      this.effects[`${model.name}/${effectName}`] = effects[effectName].bind(\n        this.dispatch[model.name],\n      );\n\n      // add effect to dispatch\n      // is assuming dispatch is available already... that the dispatch plugin is in there\n      this.dispatch[model.name][effectName] = this.createDispatcher.apply(\n        this,\n        [model.name, effectName],\n      );\n      // tag effects so they can be differentiated from normal actions\n      this.dispatch[model.name][effectName].isEffect = true;\n    }\n  },\n\n  // process async/await actions\n  middleware(store) {\n    return next => async (action: T.Action) => {\n      // async/await acts as promise middleware\n      if (action.type in this.effects) {\n        // effects that share a name with a reducer are called after their reducer counterpart\n        await next(action);\n        return this.effects[action.type](\n          action.payload,\n          store.getState(),\n          action.meta,\n        );\n      }\n      return next(action);\n    };\n  },\n};\n\nexport default effectsPlugin;\n"]}