"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var immer_1 = __importStar(require("immer"));
var redux_1 = require("redux");
// make it work in IE11
immer_1.enableES5();
function createCombineReducersWithImmer(blacklist) {
    if (blacklist === void 0) { blacklist = []; }
    return function (reducers) {
        var reducersWithImmer = {};
        // reducer must return value because literal don't support immer
        Object.keys(reducers).forEach(function (key) {
            var reducerFn = reducers[key];
            reducersWithImmer[key] = function (state, payload) {
                return typeof state === 'object' && !blacklist.includes(key)
                    ? immer_1.default(state, function (draft) {
                        var next = reducerFn(draft, payload);
                        if (typeof next === 'object')
                            return next;
                    })
                    : reducerFn(state, payload);
            };
        });
        return redux_1.combineReducers(reducersWithImmer);
    };
}
// icestore plugin
var immerPlugin = function (config) {
    if (config === void 0) { config = {}; }
    return ({
        config: {
            redux: {
                combineReducers: createCombineReducersWithImmer(config.blacklist),
            },
        },
    });
};
exports.default = immerPlugin;
//# sourceMappingURL=immer.js.map