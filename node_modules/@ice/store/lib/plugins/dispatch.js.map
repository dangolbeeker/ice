{"version":3,"file":"dispatch.js","sourceRoot":"","sources":["../../src/plugins/dispatch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;GAIG;AACH,IAAM,cAAc,GAAa;IAC/B,OAAO,EAAE;QACP,+CAA+C;QAC/C,aAAa,EAAb,UAAc,MAAgB,EAAE,KAAU;YACxC,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAChD,CAAC;QAED,aAAa;YACX,OAAO,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAChD,CAAC;QAED;;;;;WAKG;QACH,QAAQ,EAAR,UAAS,MAAgB;YACvB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;QAED;;;;;;WAMG;QACH,gBAAgB,EAAhB,UAAiB,SAAiB,EAAE,WAAmB;YAAvD,iBAWC;YAVC,OAAO,UAAO,OAAa,EAAE,IAAU;;;oBAC/B,MAAM,GAAa,EAAE,IAAI,EAAK,SAAS,SAAI,WAAa,EAAE,CAAC;oBACjE,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;wBAClC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;qBAC1B;oBACD,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;wBAC/B,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;qBACpB;oBACD,sBAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC;;iBAC9B,CAAC;QACJ,CAAC;KACF;IAED,cAAc,EAAd,UAAe,KAAU;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,QAAQ,CAAC;QACpC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAED,kDAAkD;IAClD,OAAO,EAAP,UAAQ,KAAc;QACpB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACnB,OAAO;SACR;QACD,KAA0B,UAA2B,EAA3B,KAAA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAA3B,cAA2B,EAA3B,IAA2B,EAAE;YAAlD,IAAM,WAAW,SAAA;YACpB,IAAI,CAAC,QAAQ,CAAC;gBACZ;oBACE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAC7B,2BAAyB,KAAK,CAAC,IAAI,SAAI,WAAW,MAAG;iBACtD;gBACD;oBACE,OAAO,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,UAAU;oBACjD,sBAAoB,KAAK,CAAC,IAAI,SAAI,WAAW,0BAAuB;iBACrE;aACF,CAAC,CAAC;YACH,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAClE,IAAI,EACJ,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAC1B,CAAC;SACH;IACH,CAAC;CACF,CAAC;AAEF,kBAAe,cAAc,CAAC","sourcesContent":["import * as T from '../types';\n\n/**\n * Dispatch Plugin\n *\n * generates dispatch[modelName][actionName]\n */\nconst dispatchPlugin: T.Plugin = {\n  exposed: {\n    // required as a placeholder for store.dispatch\n    storeDispatch(action: T.Action, state: any) {\n      console.warn('Warning: store not yet loaded');\n    },\n\n    storeGetState() {\n      console.warn('Warning: store not yet loaded');\n    },\n\n    /**\n     * dispatch\n     *\n     * both a function (dispatch) and an object (dispatch[modelName][actionName])\n     * @param action T.Action\n     */\n    dispatch(action: T.Action) {\n      return this.storeDispatch(action);\n    },\n\n    /**\n     * createDispatcher\n     *\n     * genereates an action creator for a given model & reducer\n     * @param modelName string\n     * @param reducerName string\n     */\n    createDispatcher(modelName: string, reducerName: string) {\n      return async (payload?: any, meta?: any): Promise<any> => {\n        const action: T.Action = { type: `${modelName}/${reducerName}` };\n        if (typeof payload !== 'undefined') {\n          action.payload = payload;\n        }\n        if (typeof meta !== 'undefined') {\n          action.meta = meta;\n        }\n        return this.dispatch(action);\n      };\n    },\n  },\n\n  onStoreCreated(store: any) {\n    this.storeDispatch = store.dispatch;\n    this.storeGetState = store.getState;\n    return { dispatch: this.dispatch };\n  },\n\n  // generate action creators for all model.reducers\n  onModel(model: T.Model) {\n    this.dispatch[model.name] = {};\n    if (!model.reducers) {\n      return;\n    }\n    for (const reducerName of Object.keys(model.reducers)) {\n      this.validate([\n        [\n          !!reducerName.match(/\\/.+\\//),\n          `Invalid reducer name (${model.name}/${reducerName})`,\n        ],\n        [\n          typeof model.reducers[reducerName] !== 'function',\n          `Invalid reducer (${model.name}/${reducerName}). Must be a function`,\n        ],\n      ]);\n      this.dispatch[model.name][reducerName] = this.createDispatcher.apply(\n        this,\n        [model.name, reducerName],\n      );\n    }\n  },\n};\n\nexport default dispatchPlugin;\n"]}