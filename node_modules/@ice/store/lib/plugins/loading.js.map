{"version":3,"file":"loading.js","sourceRoot":"","sources":["../../src/plugins/loading.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as T from '../types';\n\nexport interface LoadingConfig {\n  name?: string;\n  whitelist?: string[];\n  blacklist?: string[];\n  asNumber?: boolean;\n}\n\nexport interface LoadingState<M extends T.Models> {\n  loading: {\n    global: boolean;\n    models: { [modelName in keyof M]: boolean };\n    effects: {\n      [modelName in keyof M]: {\n        [effectName in keyof T.ExtractIModelDispatchersFromEffects<M[modelName]['effects']>]: boolean\n      }\n    };\n  };\n}\n\nconst cntState = {\n  global: 0,\n  models: {},\n  effects: {},\n};\nconst nextState = {\n  ...cntState,\n  models: {\n    ...cntState.models,\n  },\n  effects: {\n    ...cntState.effects,\n  },\n};\n\nconst createLoadingAction = (converter, i) => (\n  state,\n  { name, action }: any,\n) => {\n  nextState.global += i;\n  if (typeof nextState.models[name] === 'undefined') {\n    nextState.models[name] = 0;\n  }\n  nextState.models[name] += i;\n\n  if (typeof nextState.effects[name] === 'undefined') {\n    nextState.effects[name] = {};\n  }\n  if (typeof nextState.effects[name][action] === 'undefined') {\n    nextState.effects[name][action] = 0;\n  }\n  nextState.effects[name][action] += i;\n\n  return {\n    ...state,\n    global: converter(nextState.global),\n    models: {\n      ...state.models,\n      [name]: converter(nextState.models[name]),\n    },\n    effects: {\n      ...state.effects,\n      [name]: {\n        ...state.effects[name],\n        [action]: converter(nextState.effects[name][action]),\n      },\n    },\n  };\n};\n\nconst validateConfig = config => {\n  if (config.name && typeof config.name !== 'string') {\n    throw new Error('loading plugin config name must be a string');\n  }\n  if (config.asNumber && typeof config.asNumber !== 'boolean') {\n    throw new Error('loading plugin config asNumber must be a boolean');\n  }\n  if (config.whitelist && !Array.isArray(config.whitelist)) {\n    throw new Error(\n      'loading plugin config whitelist must be an array of strings',\n    );\n  }\n  if (config.blacklist && !Array.isArray(config.blacklist)) {\n    throw new Error(\n      'loading plugin config blacklist must be an array of strings',\n    );\n  }\n  if (config.whitelist && config.blacklist) {\n    throw new Error(\n      'loading plugin config cannot have both a whitelist & a blacklist',\n    );\n  }\n};\n\nexport default (config: LoadingConfig = {}): T.Plugin => {\n  validateConfig(config);\n\n  const loadingModelName = config.name || 'loading';\n\n  const converter =\n\t\tconfig.asNumber === true ? (cnt: number) => cnt : (cnt: number) => cnt > 0;\n\n  const loading: T.Model = {\n    name: loadingModelName,\n    reducers: {\n      hide: createLoadingAction(converter, -1),\n      show: createLoadingAction(converter, 1),\n    },\n    state: {\n      ...cntState,\n    },\n  };\n\n  cntState.global = 0;\n  loading.state.global = converter(cntState.global);\n\n  return {\n    config: {\n      models: {\n        loading,\n      },\n    },\n    onModel({ name }: T.Model) {\n      // do not run dispatch on 'loading' model\n      if (name === loadingModelName) {\n        return;\n      }\n\n      cntState.models[name] = 0;\n      loading.state.models[name] = converter(cntState.models[name]);\n      loading.state.effects[name] = {};\n      const modelActions = this.dispatch[name];\n\n      // map over effects within models\n      Object.keys(modelActions).forEach((action: string) => {\n        if (this.dispatch[name][action].isEffect !== true) {\n          return;\n        }\n\n        cntState.effects[name][action] = 0;\n        loading.state.effects[name][action] = converter(\n          cntState.effects[name][action],\n        );\n\n        const actionType = `${name}/${action}`;\n\n        // ignore items not in whitelist\n        if (config.whitelist && !config.whitelist.includes(actionType)) {\n          return;\n        }\n\n        // ignore items in blacklist\n        if (config.blacklist && config.blacklist.includes(actionType)) {\n          return;\n        }\n\n        // copy orig effect pointer\n        const origEffect = this.dispatch[name][action];\n\n        // create function with pre & post loading calls\n        const effectWrapper = async (...props) => {\n          try {\n            this.dispatch.loading.show({ name, action });\n            // waits for dispatch function to finish before calling 'hide'\n            const effectResult = await origEffect(...props);\n            this.dispatch.loading.hide({ name, action });\n            return effectResult;\n          } catch (error) {\n            this.dispatch.loading.hide({ name, action });\n            throw error;\n          }\n        };\n\n        effectWrapper.isEffect = true;\n\n        // replace existing effect with new wrapper\n        this.dispatch[name][action] = effectWrapper;\n      });\n    },\n  };\n};\n"]}