{"version":3,"file":"icestore.js","sourceRoot":"","sources":["../src/icestore.ts"],"names":[],"mappings":"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","sourcesContent":["import pluginFactory from './pluginFactory';\nimport dispatchPlugin from './plugins/dispatch';\nimport effectsPlugin from './plugins/effects';\nimport createRedux from './redux';\nimport * as T from './types';\nimport validate from './utils/validate';\n\nconst corePlugins: T.Plugin[] = [dispatchPlugin, effectsPlugin];\n\n/**\n * Icestore class\n *\n * an instance of Icestore generated by \"init\"\n */\nexport default class Icestore {\n  protected config: T.Config;\n\n  protected models: T.Model[];\n\n  private plugins: T.Plugin[] = [];\n\n  private pluginFactory: T.PluginFactory;\n\n  constructor(config: T.Config) {\n    this.config = config;\n    this.pluginFactory = pluginFactory(config);\n    for (const plugin of corePlugins.concat(this.config.plugins)) {\n      this.plugins.push(this.pluginFactory.create(plugin));\n    }\n    // preStore: middleware, model hooks\n    this.forEachPlugin('middleware', middleware => {\n      this.config.redux.middlewares.push(middleware);\n    });\n  }\n\n  public forEachPlugin(method: string, fn: (content: any) => void) {\n    for (const plugin of this.plugins) {\n      if (plugin[method]) {\n        fn(plugin[method]);\n      }\n    }\n  }\n\n  public getModels = (models: T.Models): T.Model[] => {\n    return Object.keys(models).map((name: string) => ({\n      name,\n      ...models[name],\n      reducers: models[name].reducers || {},\n    }));\n  }\n\n  public addModel(model: T.Model) {\n    validate([\n      [!model, 'model config is required'],\n      [typeof model.name !== 'string', 'model \"name\" [string] is required'],\n      [\n        model.state === undefined && model.baseReducer === undefined,\n        `model(${model.name}) \"state\" is required`,\n      ],\n      [\n        model.baseReducer !== undefined &&\n\t\t\t\t\ttypeof model.baseReducer !== 'function',\n        `model(${model.name}) \"baseReducer\" must be a function`,\n      ],\n    ]);\n    // run plugin model subscriptions\n    this.forEachPlugin('onModel', onModel => onModel(model));\n  }\n\n  public init() {\n    // collect all models\n    this.models = this.getModels(this.config.models);\n    for (const model of this.models) {\n      this.addModel(model);\n    }\n    // create a redux store with initialState\n    // merge in additional extra reducers\n    const redux = createRedux.call(this, {\n      redux: this.config.redux,\n      models: this.models,\n    });\n\n    const icestore = {\n      name: this.config.name,\n      ...redux.store,\n      // dynamic loading of models with `replaceReducer`\n      model: (model: T.Model) => {\n        this.addModel(model);\n        redux.mergeReducers(redux.createModelReducer(model));\n        redux.store.replaceReducer(\n          redux.createRootReducer(this.config.redux.rootReducers),\n        );\n        redux.store.dispatch({ type: '@@redux/REPLACE ' });\n      },\n    };\n\n    this.forEachPlugin('onStoreCreated', onStoreCreated => {\n      const returned = onStoreCreated(icestore);\n      // if onStoreCreated returns an object value\n      // merge its returned value onto the store\n      if (returned) {\n        Object.keys(returned || {}).forEach(key => {\n          icestore[key] = returned[key];\n        });\n      }\n    });\n\n    return icestore;\n  }\n}\n"]}