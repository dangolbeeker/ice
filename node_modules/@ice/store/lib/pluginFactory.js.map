{"version":3,"file":"pluginFactory.js","sourceRoot":"","sources":["../src/pluginFactory.ts"],"names":[],"mappings":";;;;;AACA,8DAAwC;AAExC;;;;GAIG;AACH,mBAAe,UAAC,MAAgB,IAAK,OAAA,CAAC;IACpC,MAAM,QAAA;IACN;;;;OAIG;IACH,QAAQ,oBAAA;IAER;;;;;OAKG;IACH,MAAM,EAAN,UAAO,MAAgB;QACrB,kBAAQ,CAAC;YACP;gBACE,MAAM,CAAC,cAAc,IAAI,OAAO,MAAM,CAAC,cAAc,KAAK,UAAU;gBACpE,0CAA0C;aAC3C;YACD;gBACE,MAAM,CAAC,OAAO,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU;gBACtD,mCAAmC;aACpC;YACD;gBACE,MAAM,CAAC,UAAU,IAAI,OAAO,MAAM,CAAC,UAAU,KAAK,UAAU;gBAC5D,sCAAsC;aACvC;SACF,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC1B;QAED,IAAM,MAAM,GAAmB,EAAE,CAAC;QAElC,IAAI,MAAM,CAAC,OAAO,EAAE;YAClB,KAAkB,UAA2B,EAA3B,KAAA,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAA3B,cAA2B,EAA3B,IAA2B,EAAE;gBAA1C,IAAM,GAAG,SAAA;gBACZ,IAAI,CAAC,GAAG,CAAC;oBACP,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,UAAU;wBACvC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,iCAAiC;wBAClE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,8BAA8B;aACzE;SACF;QACD,KAAqB,UAA2C,EAA3C,MAAC,SAAS,EAAE,YAAY,EAAE,gBAAgB,CAAC,EAA3C,cAA2C,EAA3C,IAA2C,EAAE;YAA7D,IAAM,MAAM,SAAA;YACf,IAAI,MAAM,CAAC,MAAM,CAAC,EAAE;gBAClB,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5C;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF,CAAC,EApDmC,CAoDnC,EAAC","sourcesContent":["import * as T from './types';\nimport validate from './utils/validate';\n\n/**\n * PluginFactory\n *\n * makes Plugin objects extend and inherit from a root PluginFactory\n */\nexport default (config: T.Config) => ({\n  config,\n  /**\n   * validate\n   *\n   * bind validate to the store for easy access\n   */\n  validate,\n\n  /**\n   * create plugin\n   *\n   * binds plugin properties and functions to an instance of PluginFactorys\n   * @param plugin\n   */\n  create(plugin: T.Plugin): T.Plugin {\n    validate([\n      [\n        plugin.onStoreCreated && typeof plugin.onStoreCreated !== 'function',\n        'Plugin onStoreCreated must be a function',\n      ],\n      [\n        plugin.onModel && typeof plugin.onModel !== 'function',\n        'Plugin onModel must be a function',\n      ],\n      [\n        plugin.middleware && typeof plugin.middleware !== 'function',\n        'Plugin middleware must be a function',\n      ],\n    ]);\n\n    if (plugin.onInit) {\n      plugin.onInit.call(this);\n    }\n\n    const result: T.Plugin | any = {};\n\n    if (plugin.exposed) {\n      for (const key of Object.keys(plugin.exposed)) {\n        this[key] =\n          typeof plugin.exposed[key] === 'function'\n            ? plugin.exposed[key].bind(this) // bind functions to plugin class\n            : Object.create(plugin.exposed[key]); // add exposed to plugin class\n      }\n    }\n    for (const method of ['onModel', 'middleware', 'onStoreCreated']) {\n      if (plugin[method]) {\n        result[method] = plugin[method].bind(this);\n      }\n    }\n    return result;\n  },\n});\n"]}