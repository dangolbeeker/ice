{"version":3,"file":"redux.js","sourceRoot":"","sources":["../src/redux.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Redux from 'redux';\nimport * as T from './types';\nimport isListener from './utils/isListener';\n\nconst composeEnhancersWithDevtools = (\n  devtoolOptions: T.DevtoolOptions = {},\n): any => {\n  const { disabled, ...options } = devtoolOptions;\n  /* istanbul ignore next */\n  return !disabled &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(options)\n    : Redux.compose;\n};\n\nexport default function({\n  redux,\n  models,\n}: {\n  redux: T.ConfigRedux;\n  models: T.Model[];\n}) {\n  const combineReducers = redux.combineReducers || Redux.combineReducers;\n  const createStore: Redux.StoreCreator = redux.createStore || Redux.createStore;\n  const initialStates: any =\n    typeof redux.initialStates !== 'undefined' ? redux.initialStates : {};\n\n  // Allows passing in of reducer functions, rather than models.\n  // While not recommended,\n  // this can be used for migrating a Redux codebase or configuring different Redux extensions.\n  this.reducers = redux.reducers;\n\n  // combine models to generate reducers\n  this.mergeReducers = (nextReducers: T.ModelReducers = {}) => {\n    // merge new reducers with existing reducers\n    this.reducers = { ...this.reducers, ...nextReducers };\n    if (!Object.keys(this.reducers).length) {\n      // no reducers, just return state\n      return (state: any) => state;\n    }\n    return combineReducers(this.reducers);\n  };\n\n  this.createModelReducer = (model: T.Model) => {\n    const modelBaseReducer = model.baseReducer;\n    const modelReducers = {};\n    for (const modelReducer of Object.keys(model.reducers || {})) {\n      const action = isListener(modelReducer)\n        ? modelReducer\n        : `${model.name}/${modelReducer}`;\n      modelReducers[action] = model.reducers[modelReducer];\n    }\n\n    // use the `state = model.state` argument convention popularized\n    const combinedReducer = (state: any = model.state, action: T.Action) => {\n      if (typeof modelReducers[action.type] === 'function') {\n        return modelReducers[action.type](state, action.payload, action.meta);\n      }\n      return state;\n    };\n\n    this.reducers[model.name] = !modelBaseReducer\n      ? combinedReducer\n      : (state: any, action: T.Action) =>\n        combinedReducer(modelBaseReducer(state, action), action);\n  };\n\n  // initialize model reducers\n  for (const model of models) {\n    this.createModelReducer(model);\n  }\n\n  // rootReducers is a way to setup middleware hooks at the base of your root reducer.\n  // Unlike middleware, the return value is the next state.\n  // If undefined, the state will fallback to the initial state of reducers.\n  this.createRootReducer = (\n    rootReducers: T.RootReducers = {},\n  ): Redux.Reducer<any, T.Action> => {\n    const mergedReducers: Redux.Reducer<any> = this.mergeReducers();\n    if (Object.keys(rootReducers).length) {\n      return (state, action) => {\n        const rootReducerAction = rootReducers[action.type];\n        if (rootReducerAction) {\n          return mergedReducers(rootReducerAction(state, action), action);\n        }\n        return mergedReducers(state, action);\n      };\n    }\n    return mergedReducers;\n  };\n\n  const rootReducer = this.createRootReducer(redux.rootReducers);\n\n  const middlewares = Redux.applyMiddleware(...redux.middlewares);\n  const enhancers = composeEnhancersWithDevtools(redux.devtoolOptions)(\n    ...redux.enhancers,\n    middlewares,\n  );\n\n  this.store = createStore(rootReducer, initialStates, enhancers);\n\n  return this;\n}\n"]}